
// NeoStrip
/**
 * @file NeoStrip.h
 * @brief defines NeoStrip class on top of Adafruit_NeoPixel as a chain of pixels
 *
 *   a class derived from Adafruit_NeoPixel
 *   adds a simple boolean stripChanged
 * This allows us to set/clear/test when we run a NeoWindow Effect
 * and only run the show function if we changed the strip
 * note that this requires all writes to use setStripChanged(),
 * which may not be true, if the code directly accesses strip.setPixel()
 */

#ifndef _NEOSTRIP_
#define _NEOSTRIP_

#include <Adafruit_NeoPixel.h>

class NeoStrip: public Adafruit_NeoPixel {
  private:
    boolean stripChanged; /*!< marked TRUE by any effect that changes a pixel */
    static int s_nIDGenerator; /*! class level counter for next instance id */
    int myId; /*!< id of this strip; autogenerated by constructor */
    boolean *pixelActive; /*!<  array of booleans to define if each pixel is in use by Effects */
    
 public:

 NeoStrip(uint16_t n, uint8_t p=6, uint8_t t=NEO_GRB + NEO_KHZ800);

 void setStripChanged(); /*!< marks the strip as Changed */
 void clearStripChanged(); /*!< clears changed flag; strip shown only if changed */
 boolean getStripChanged(); /*!< access internal flag */

 // some simple functions to effect whole strip
 void clearStrip(); /*!< clears whole strip to black */
 void fillStrip(uint32_t c); /*!< fills whole strip with Adafruit_NeoPixel::Color */

 void printId(); /*!< uses Serial.println to emit strip number */

 void show(void); /*!< if strip changed, invoke parent show, and clear stripChanged */


//////
    /**
     * Active Pixel booleans can be used by NeoWindows to determine if a particular pixel
     * is active or not at any time.  Useful for sparkles, random fades, etc.
     */
  void clearActive(); /*!< clears the active pixel array */
  void setPixelActive(int idx); /*!< sets active bit for given pixel index */
  void setPixelInactive(int idx); /*!< clears active bit for given pixel index */
  boolean isPixelActive(int idx); /*!< returns whether current pixel is active */
  
 //////
 // helper function to create random Color (unit32_t of r, g,b)
    /** 
     * helper functions dealing with Adafruit_NeoPixel::Color (32 bit color)
     */
 static uint32_t randomColor(void) { return Adafruit_NeoPixel::Color(random(0,255),random(0,255),random(0,255));}
    static uint32_t randomWheelColor(void);
    static uint32_t randomColor(uint32_t c1, uint32_t c2);
 static uint8_t getRed(uint32_t c) { return (uint8_t)(c >> 16);}
 static uint8_t getGreen(uint32_t c) { return (uint8_t)(c >>  8);}
 static uint8_t getBlue(uint32_t c) { return (uint8_t)c;}

 static const uint32_t White; /*!< quick common reference for full white color */
 static uint32_t colorWheel(byte WheelPos);  /*!< colorWheel defines 255 colors of full intensity */
 
};

#endif // NEOSTRIP
